<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Impactful Underdog]]></title><description><![CDATA[Mehdi Karamnejad's personal blog on software engineering, startups, and entrepreneurship]]></description><link>https://blog.mehdi.tech</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 19 Feb 2020 06:58:18 GMT</lastBuildDate><item><title><![CDATA[Evaluating Software Engineers]]></title><description><![CDATA[Over the past few years, I had the pleasure of working with many software engineers in different capacities. Here is 
the list I came up…]]></description><link>https://blog.mehdi.tech/evaluating-software-engineers/</link><guid isPermaLink="false">https://blog.mehdi.tech/evaluating-software-engineers/</guid><pubDate>Wed, 19 Feb 2020 06:30:00 GMT</pubDate><content:encoded>&lt;p&gt;Over the past few years, I had the pleasure of working with many software engineers in different capacities. Here is
the list I came up with to use as the reference to give feedback to software engineers. The main purpose is to ensure
most of the aspects are covered so that team members grow, the team is high-performing, and the company is moving towards
its vision. The skills are divided into categories so that each category can be evaluated in details.&lt;/p&gt;
&lt;p&gt;I will be updating this list as I learn more in my leadership journey.&lt;/p&gt;
&lt;h2&gt;Technical ability&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Constantly learning new approaches to make our life easier (books, tools, libraries, new language features, etc..)&lt;/li&gt;
&lt;li&gt;Bring a new perspective to the codebase. Use design patterns if necessary or new algorithmic approaches to find the things that we are not doing optimally and improve them.&lt;/li&gt;
&lt;li&gt;Develop confidence and technical ability to architect and develop a feature from A to Z using the best practices.&lt;/li&gt;
&lt;li&gt;Use the broken window theory to constantly improve the codebase.&lt;/li&gt;
&lt;li&gt;Improve code delivery time.&lt;/li&gt;
&lt;li&gt;Improve the quality of  delivered code (how performant is your code? Also, high code coverage in unit tests. To sum up, how often we have to do an emergency code fix at 11 PM?)&lt;/li&gt;
&lt;li&gt;Improve the quality of code reviewing other developers’ work. Basically, from 3 perspectives: 1) is this PR a good approach as a whole? 2) Are all the language features being used properly? 3) are all the code statements doing what the developer intended?&lt;/li&gt;
&lt;li&gt;Attention to details! Because the difference between good and great is details (i.e. what’s the ratio that you get things right on the first iteration).&lt;/li&gt;
&lt;li&gt;How often are you finding issues in the codebase in order to find/fix bugs or improve performance.&lt;/li&gt;
&lt;li&gt;Unblocking and context switching abilities: How do you find a way to unblock yourself if your task is dependant on another task. If you are absolutely blocked on a task how well do you context switch to doing other tasks or addressing technical debts?&lt;/li&gt;
&lt;li&gt;Identify things that are costing the company substantially and provide alternative cost-effective solutions&lt;/li&gt;
&lt;li&gt;Constantly reducing current complexity. Additionally, come up with the least complex approaches to solve problems.&lt;/li&gt;
&lt;li&gt;Software delivery creativity&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ability to work and negotiate with the product team to bring down the scope and reduce time-to-market while minimally reducing the value delivered to the customer (i.e. ability to compromise part of requirements and descope them from the deliverables)
Product awareness: when developing features, do you take the time needed to evaluate and consider the potential side effects to other features and count them into your design and development?&lt;/p&gt;
&lt;h2&gt;Focus on customer and company&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;The person is constantly aligned with the core business goals and strive to put most of their technical effort into realizing major company goals&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Has a clear focus and knowledge on what he does has a direct impact on customers and strive to embrace a customer-obsessed culture&lt;/p&gt;
&lt;h2&gt;Initiative&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;If something needs to be done that improves the code base, fixes bugs, or brings business value, are you taking initiative to roll up sleeves and do it with no or minimal supervision?&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Are you helping your colleagues when they are having technical problems?&lt;/p&gt;
&lt;h2&gt;Accountability &amp;#x26; ownership&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do you take responsibility for things that go wrong and immediately try to fix them?&lt;/p&gt;
&lt;h2&gt;Reliability&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;How well the tasks mentioned in the “technical ability” are being done with no or minimal supervision&lt;/li&gt;
&lt;li&gt;Deliver software on time based on the estimate as much as possible&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Level of availability in times of a crisis &lt;/p&gt;
&lt;h2&gt;Communication&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;Communicate with all the parties involved in a feature development so that after the feature is done no one is surprised&lt;/li&gt;
&lt;li&gt;Communicate any potential problems that can affect deadlines internally (and externally if necessary). This communication should happen as soon as a hurdle is reached&lt;/li&gt;
&lt;li&gt;Frequently communicate with the business to fully understand what value proposition we are trying to develop. Is there any intellectual property we are not monetizing? &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Communicate with the operations and business so we are always on top of their needs&lt;/p&gt;
&lt;h2&gt;Interpersonal skills&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;Be ego-free&lt;/li&gt;
&lt;li&gt;Be kind&lt;/li&gt;
&lt;li&gt;Be fun to work with! &lt;/li&gt;
&lt;li&gt;Be open to feedback&lt;/li&gt;
&lt;li&gt;Being empathic towards peers at work and be mindful of their emotional/mental state&lt;/li&gt;
&lt;li&gt;How well conflicts are handled&lt;/li&gt;
&lt;li&gt;The approach you take to prove that what you believe is correct from a technical perspective? (i.e. data-driven decision making)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contribute to the culture so that not only you love working at the company but you attract other people to want to work at the company.&lt;/p&gt;
&lt;h2&gt;Leadership&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;Help other people in the team to perform everything mentioned above better! &lt;/li&gt;
&lt;li&gt;Improve development lifecycle processes so that others can work more efficiently &lt;/li&gt;
&lt;li&gt;Morph into a personality that can inspire other colleagues and help them with their professional development&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ability to mobilize developers and delegate work to fully develop a feature or set of features. This results in
the team to be able to deliver deliverables on time in the most efficient frictionless manner&lt;/p&gt;
&lt;h2&gt;Going above and beyond&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How often you make your colleagues say “Wow, that’s amazing, I did not expect that” in all of the items mentioned above.
This means recognizing a company’s need outside the scope of your regular duties in order to assist the company to deliver
better customer experience, improve processes significantly, and introduce fundamentally better technical approaches to
the problems&lt;/p&gt;
&lt;h2&gt;Innovate and contribute to value prop&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;Ability to utilize the engineering mindset to come up with creative ways to generate revenue or traction for the company&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Tech Startup Maturity Levels]]></title><description><![CDATA[A SaaS software company is formed to mainly build solutions that a target market has demand for. For a tech company to be 
generally…]]></description><link>https://blog.mehdi.tech/startup-maturity-levels/</link><guid isPermaLink="false">https://blog.mehdi.tech/startup-maturity-levels/</guid><pubDate>Tue, 04 Feb 2020 05:00:00 GMT</pubDate><content:encoded>&lt;p&gt;A SaaS software company is formed to mainly build solutions that a target market has demand for. For a tech company to be
generally successful at what they do, they need to build their software solution in a way that: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It continuously delivers value to the end users with best user experience possible.&lt;/li&gt;
&lt;li&gt;It has high quality and it’s well-engineered.&lt;/li&gt;
&lt;li&gt;It’s scalable, maintainable, and future friendly as much as possible.&lt;/li&gt;
&lt;li&gt;It continuously minimizes time and financial costs during software delivery to increase profitability.&lt;/li&gt;
&lt;li&gt;It continuously drives innovation to be relevant in the ever-changing tech scene.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In reality, tech companies are in the constant battle of time, resources, and deliverables. The product management
team along with tech leadership decides what needs to be done to achieve aforementioned goals. Companies at different
levels of maturity need to be equipped with right technologies and processes to be considered high performing. &lt;/p&gt;
&lt;p&gt;Here is the checklist for every level of maturity of any tech company. The higher level a tech company is on this scale,
the more it’s considered a high performing tech organization.&lt;/p&gt;
&lt;h2&gt;Level 1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use a software development methodology that works for your team.&lt;/li&gt;
&lt;li&gt;Structured goal setting is in place: Using a systematic way of setting goals that drives what is built by developers.
This brings alignment to all functions of an organization and helps everyone have focus and ensure individual
contributors are working on the right thing. Let’s face it, building and shipping software is very expensive! therefore,
building the wrong products or features can really hurt a tech company. &lt;a href=&quot;https://www.goodreads.com/book/show/39286958-measure-what-matters&quot;&gt;OKRs&lt;/a&gt;
are a very handy tool for structured goal setting.&lt;/li&gt;
&lt;li&gt;Extreme ownership in the engineering team: once developers are code complete, they are not done! They are trained to
have this mindset that they are done once what they are working on is in production creating value for end-users.&lt;/li&gt;
&lt;li&gt;Continuous negotiation with the product team: There is a constant line
of communication open between engineers and product managers to bring down the feature scope/complexity while not
drastically minimize the value delivered to the user. The result of this practice is to save time and development costs
while still delivering great customer experience.  &lt;/li&gt;
&lt;li&gt;Using an issue &amp;#x26; project tracking software system: Platforms such as Jira enable you to implement the software
development methodology you are using and ensure any engineering work is being tracked through the entire development
lifecycle.    &lt;/li&gt;
&lt;li&gt;Using version control systems, proper branching and code merging model that works for your team resulting in fast code
integration.&lt;/li&gt;
&lt;li&gt;Using an effective communication mechanism such as Slack.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developers can reproduce bugs and test everything in their development environments.&lt;/p&gt;
&lt;h2&gt;Level 2&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;Everything mentioned in level 1 is practiced.&lt;/li&gt;
&lt;li&gt;A prioritization model is in place: the engineering team is always working on what matters the most. &lt;a href=&quot;https://www.intercom.com/blog/rice-simple-prioritization-for-product-managers/&quot;&gt;RICE&lt;/a&gt;
is a very effective prioritization model. Also, product team always ensures engineers do not run out of high priority
work.&lt;/li&gt;
&lt;li&gt;Engineers understand the big picture: technical individual contributors can sometimes get into too much implementation
detail of what they are working on. This results in them losing touch with the big picture and the overall intended value
being delivered. To help with this, we always want to ensure engineers follow the “working backwards” method. i.e. always
asking ourselves “imagine we are done and this feature is live! How would the user use the output of this work and is it
creating the value the user is looking for?”&lt;/li&gt;
&lt;li&gt;Processes are defined in a way that people are not blocked on each other as much as feasible. Leaders are very
attentive to the the word “blocked”, strive to resolve the situation immediately and place processes in place to minimize
the amount of blockage occurring from the same root cause.&lt;/li&gt;
&lt;li&gt;Genuine care for developer happiness: ensure developers are heard, they are appreciated, their concerns are addressed,
and there is a clear career growth plan laid out for them by retrospective and 1-on-1 meetings. &lt;/li&gt;
&lt;li&gt;Engineers get architectural design buy-in before implementation: engineers talk to as many colleagues as they can about
how they are going to address a problem before actual implementation. This is to ensure the solution is the most optimal
and follows the best engineering practices.&lt;/li&gt;
&lt;li&gt;Having a systematic way of communicating internally and external regarding what is going to be built long term and
short term.&lt;/li&gt;
&lt;li&gt;Application environments are isolated: Modern software systems can consist of many different services. Any instance of
any service running in an environment should be completely isolated from services running on a different environment
(having a test, staging, and a production environment is very common).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log application output and and expose them to the team: engineers need to have access to application logs for
debugging purposes. Ideally, logs for all the environments are available through a logging aggregator. &lt;/p&gt;
&lt;h2&gt;Level 3&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;Everything mentioned in level 2 is practiced.&lt;/li&gt;
&lt;li&gt;Unify design systems: When building new features, engineers at don’t have to think about how the general UI elements
look like as they use a repository commonly called style guide. &lt;/li&gt;
&lt;li&gt;Educate engineers to be product-oriented: Engineers building out features are trained to have a passion for the product
as a whole. This helps them make better decisions during development and make the right comprises.&lt;/li&gt;
&lt;li&gt;Build out technology radar: Clearly communicate what tools, frameworks, and languages will be used in the org.
&lt;a href=&quot;https://www.thoughtworks.com/radar&quot;&gt;Tech Radar&lt;/a&gt; can be a handy tool regarding this matter. This allows a cohesive
development strategy and more code reusability resulting in faster product delivery. &lt;/li&gt;
&lt;li&gt;Develop with SEO in mind: effective tech organizations do not let SEO be afterthought. They are always up-to-date with
the latest SEO trends and ensure engineers follow them during feature development.  &lt;/li&gt;
&lt;li&gt;Develop with mobile-first mind set: where applicable, all the experiences delivered to the user are mobile-friendly.&lt;/li&gt;
&lt;li&gt;Know your users: start gathering data on how users are using your software while respecting their privacy.&lt;/li&gt;
&lt;li&gt;Feature toggle strategy is in place: there is a way to incrementally and continuously release new features to
customers. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zero downtime deployments: when production deployments take place, there is no downtime for current users.&lt;/p&gt;
&lt;h2&gt;Level 4&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;Everything mentioned in level 3 is practiced.&lt;/li&gt;
&lt;li&gt;Maximize code reusability: for all the back-end, front-end, and infrastructure code there is a strategy in
place to maximize code reusability across projects.  &lt;/li&gt;
&lt;li&gt;Systematic documentation in place: there is a consistent way of documenting any transferable knowledge across the tech
organization. The company culture entices engineers to keep the documentation updated as things change.&lt;/li&gt;
&lt;li&gt;Constantly asking and addressing this question: are we automating anything that can be automated?&lt;/li&gt;
&lt;li&gt;Have a systematic way to handle escalations when the software is not working as expected in the production environment
and close the loop with support and non-tech stake holders when issues are scheduled to be addressed. &lt;/li&gt;
&lt;li&gt;Document production issues caused by human error as post-mortems. This is a mechanism to continuously improve the tech
organization.&lt;/li&gt;
&lt;li&gt;There is a systematic way of training and onboarding in place for new hires. There is also protocol in place to
knowledge transfer and revoke access rights when people decide to leave the company. Services and tools are registered
using a company identity (e.g. email) and not a specific person’s identity. &lt;/li&gt;
&lt;li&gt;There is a structure in place for engineers to grow in their career.&lt;/li&gt;
&lt;li&gt;Unit tests, integration tests, and end-to-end tests are in place as much as possible to ensure quality and
maintainability.&lt;/li&gt;
&lt;li&gt;Common data exposure mechanism: if microservices are being used in the tech infrastructure, there is a strategy in
place to expose all the data endpoints using the same consistent mechanism as much as possible (e.g. consistently use
GraphQL or RESTful APIs).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CI/CD: there is a clear operational strategy for continuous integration and continuous delivery of the software.&lt;/p&gt;
&lt;h2&gt;Level 5&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;Everything mentioned in level 4 is practiced.&lt;/li&gt;
&lt;li&gt;Train everyone to be a leader! As the organization grows, it’s crucial to build leadership skills in as many people as
possible. This sense of ownership helps the company to succeed in the long run.&lt;/li&gt;
&lt;li&gt;Monitoring performance and find what’s slowing down the system on both the front-end(e.g. using Lighthouse) and the
back-end(e.g. using APMs). Monitoring service health to be proactive instead of reactive when problems arise
(i.e. strategy in place to find issues before users find them). There should also be load testing involved as part of
the monitoring system. &lt;/li&gt;
&lt;li&gt;Having a systematic way to monitor security and develop with security in mind.&lt;/li&gt;
&lt;li&gt;Engineers and leaders consider the financial cost of any third party service vs ROI and scalability when choosing a
technology to use. &lt;/li&gt;
&lt;li&gt;If the organization is involved in building software systems that include different levels of users, there needs to be
a system in place to let users know, who did what action at what time (i.e. have user activity tracking system in place)&lt;/li&gt;
&lt;li&gt;A/B testing strategy in place: there is a way for the product team to deliver different experiences to different users
where applicable. This is to learn more about what users want, what works for the product, and continuously build the right features.  &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>